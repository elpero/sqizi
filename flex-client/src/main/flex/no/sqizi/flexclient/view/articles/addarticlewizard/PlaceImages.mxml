<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:uicomponents="no.sqizi.flexclient.uicomponents.*"
         implements="no.sqizi.flexclient.helper.WizardStep">
    <mx:Text id="header" text="Place Images in the Article"/>

    <mx:HBox width="100%" height="100%">
        <uicomponents:MyText id="editedContent"
                             width="60%"
                             height="100%"
                             htmlText="{article.content}"
                             dragEnter="handleDragEnter(event)"
                             dragDrop="handleDragDrop(event)"/>
        <mx:TileList width="40%" height="100%" dataProvider="{articleModel.images}" dragEnabled="true">
            <mx:itemRenderer>
                <mx:Component>
                    <mx:Image source="{data.thumbnailPath}"/>
                    <!--<mx:Image source="{data.thumbnailPath}" mouseMove="outerDocument.handleMouseMove(event)"/>-->
                </mx:Component>
            </mx:itemRenderer>
        </mx:TileList>
    </mx:HBox>


    <mx:Script><![CDATA[

        import mx.containers.Canvas;
        import mx.core.DragSource;

        import mx.core.IUITextField;
        import mx.core.UITextField;
        import mx.core.UITextFormat;
        import mx.events.DragEvent;
        import mx.managers.DragManager;

        import no.sqizi.flexclient.domain.Article;
        import no.sqizi.flexclient.domain.Image;
        import no.sqizi.flexclient.model.ArticleModel;

        import org.swizframework.Swiz;


        private function handleDragDrop(event:DragEvent):void {
            var text:MyText = MyText(event.currentTarget);
            var item:Image = Image(TileList(event.dragInitiator).selectedItem);
            var textField:IUITextField = text.getUITextField();
            var index:int = textField.getCharIndexAtPoint(event.localX, event.localY);
            var htmlIndex:int = calculateHtmlPosition(text.htmlText, index);
            var preText:String = text.htmlText.slice(0, htmlIndex);
            var postText:String = text.htmlText.slice(htmlIndex);
            var insertionText:String = "<img src=\"" + item.imagePath + "\" width=\"400\" height=\"300\"/>";
            var newHtmlText:String = preText + insertionText + postText;
            text.htmlText = newHtmlText;


        }

        public function calculateHtmlPosition(htmlstr:String, pos:int):int
        {
            // we return -1 (not found) if the position is bad
            if (pos <= -1)
                return -1;

            // characters that appears when a tag starts
            var openTags:Array = ["<","&"];
            // characters that appears when a tag ends
            var closeTags:Array = [">",";"];
            // the tag should be replaced with
            // ex: &amp; is & and has 1 as length but normal
            // tags have 0 length
            var tagReplaceLength:Array = [0,1];
            // flag to know when we are inside a tag
            var isInsideTag:Boolean = false;
            var cnt:int = 0;
            // the id of the tag opening found
            var tagId:int = -1;
            var tagContent:String = "";

            for (var i:int = 0; i < htmlstr.length; i++)
            {
                // if the counter passes the position specified
                // means that we reach the text position
                if (cnt >= pos)
                    break;
                // current char
                var currentChar:String = htmlstr.charAt(i);
                // checking if the current char is in the open tag array
                for (var j:int = 0; j < openTags.length; j++)
                {
                    if (currentChar == openTags[j])
                    {
                        // set flag
                        isInsideTag = true;
                        // store the tag open id
                        tagId = j;
                    }
                }
                if (!isInsideTag)
                {
                    // increment the counter
                    cnt++;
                } else {
                    // store the tag content
                    // needed afterwards to find new lines
                    tagContent += currentChar;
                }
                if (currentChar == closeTags[tagId]) {
                    // we ad the replace length
                    if (tagId > -1) cnt += tagReplaceLength[tagId];
                    // if we encounter the </P> tag we increment the counter
                    // because of new line character
                    if (tagContent == "</P>") cnt++;
                    // set flag
                    isInsideTag = false;
                    // reset tag content
                    tagContent = "";
                }
            }
            // return de position in html text
            return i;
        }

        private function handleDragEnter(event:DragEvent):void {
            DragManager.acceptDragDrop(mx.core.UIComponent(event.currentTarget));
        }

        internal function handleMouseMove(event:MouseEvent):void {
            var dragInitiator:Canvas = new Canvas();
            var imageSource:String = event.currentTarget.imagePath;
            var ds:DragSource = new DragSource();
            ds.addData(imageSource, 'imageSource');
            DragManager.doDrag(dragInitiator, ds, event);
        }

        [Autowire(bean="articleModel")]
        [Bindable]
        public var articleModel:ArticleModel;


        private var _article:Article = null;

        [Bindable]
        public function get article():Article {
            return _article;
        }

        public function set article(value:Article):void {
            _article = value;
        }

        public function moveToTheNextView():void {
            article.content = editedContent.htmlText;
            Swiz.dispatchEvent(new Event(AddArticleView.READY_TO_MOVE_NEXT_MESSAGE));
        }]]></mx:Script>
</mx:VBox>